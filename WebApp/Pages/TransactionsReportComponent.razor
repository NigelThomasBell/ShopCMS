@page "/transactions"
@attribute [Authorize(Policy = "AdminOnly")]

@inject IJSRuntime JSRuntime
@inject IGetTransactionsUseCase GetTransactionsUseCase

<div class="card w-100">
    <div class="card-body">
        <h2 class="mb-3">Transactions</h2>
        <div id="printarea">
            <div class="row">
                <div class="col-2">
                    <label for="cashier">Cashier Name</label>
                    <input type="text" id="cashier" class="form-control" @bind-value="cashierName" />
                </div>
                <div class="col-3">
                    <label for="startdate">Start Date</label>
                    <input type="date" id="startdate" class="form-control" @bind-value="startDate" />
                </div>
                <div class="col-3">
                    <label for="enddate">End Date</label>
                    <input type="date" id="enddate" class="form-control" @bind-value="endDate" />
                </div>
                <div class="col-2">
                    <label>&nbsp;</label>
                    <button type="button" class="btn btn-primary form-control" @onclick="LoadTransactions">Search</button>
                </div>
                <div class="col-2">
                    <label>&nbsp;</label>
                    <button type="button" class="btn btn-primary form-control" @onclick="PrintReport">Print</button>
                </div>
            </div>
            <br />
            @if (transactions != null)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th class="text-right">Date Time</th>
                            <th class="text-right">Cashier Name</th>
                            <th class="text-right">Product Name</th>
                            <th class="text-right">Qty Before</th>
                            <th class="text-right">Qty Sold</th>
                            <th class="text-right">Qty After</th>
                            <th class="text-right">Unit Price</th>
                            <th class="text-right">Product Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tran in transactions)
                        {
                            <tr>
                                <td class="text-right">@tran.TimeStamp.ToString("yyyy-MM-dd hh:mm")</td>
                                <td class="text-right">@tran.CashierName</td>
                                <td class="text-right">@tran.ProductName</td>
                                <td class="text-right">@tran.BeforeQty</td>
                                <td class="text-right">@tran.SoldQty</td>
                                <td class="text-right">@(tran.BeforeQty - tran.SoldQty)</td>
                                <td class="text-right">@(string.Format("{0:c}", tran.Price))</td>
                                <td class="text-right">@(string.Format("{0:c}", tran.SoldQty * tran.Price))</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="6">&nbsp;</td>
                            <td style="text-align:right">
                                <b>Grand Total:</b>
                            </td>
                            <td style="text-align:right">
                                <b>
                                    @(string.Format("{0:c}", transactions.Sum(x => x.Price * x.SoldQty)))
                                </b>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            }
        </div>
    </div>
</div>

@code {

    private string cashierName;
    private DateTime startDate;
    private DateTime endDate;
    private IEnumerable<Transaction> transactions;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        startDate = DateTime.Today;
        endDate = DateTime.Today;
    }

    private void LoadTransactions()
    {
        transactions = GetTransactionsUseCase.Execute(cashierName, startDate, endDate);
    }

    private void PrintReport()
    {
        JSRuntime.InvokeVoidAsync("print");
    }
}

@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
    <div class="form-group">
        <div class="card w-100">
            <div class="card-body">
                @switch (true)
                {
                    case var _ when !string.IsNullOrWhiteSpace(errorMessage):
                        <div class="alert alert-danger">@errorMessage</div>
                        break;

                    case var _ when !string.IsNullOrWhiteSpace(successMessage):
                        <div class="alert alert-success">@successMessage</div>
                        break;

                    default:
                        // Add any default case behavior if needed
                        break;
                }
                <EditForm Model="productToSell" OnValidSubmit="SellProduct">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>

                    <div class="form-group mb-2">
                        <label class="mb-2" for="qty">Quantity</label>
                        <InputNumber id="qty" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
                    </div>
                    <button type="submit" class="btn btn-primary">Sell</button>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private Product productToSell;
    private string errorMessage, successMessage;

    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedProduct != null)
        {
            productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else
        {
            productToSell = null;
        }
    }

    private void SellProduct()
    {
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {
            errorMessage = "The quantity has to be greater than zero.";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            successMessage = "Sale successful.";
            SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value);
        }
        else if (product.Quantity == 0)
        {
            errorMessage = $"{product.Name} is out of stock.";
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left.";
        }
    }

}
